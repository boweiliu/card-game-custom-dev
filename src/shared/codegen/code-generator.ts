/**
 * Code generation functions for ID prefix types and constants
 */

interface EntityConfig {
  name: string;
  prefix: string;
  sourceFile?: string;
}

function generateImports(): string {
  return `import { PrefixedId } from "@/shared/types/id-prefixes";
import { AssertExtends, TypeBlob } from "@/shared/data-layer/types";`;
}

function generatePrefixConstants(config: EntityConfig): string {
  const upperName = config.name.toUpperCase();
  const prefix = config.prefix;
  
  return `export const _PREFIXES = {
  // DB
  ${upperName}_ENTITY: '${prefix}e_',
  ${upperName}_VERSION: '${prefix}v_',
  ${upperName}_SNAPSHOT: '${prefix}s_',
  // Client
  ${upperName}_ENTITY_CLIENT: '${prefix}f_',
  ${upperName}_VERSION_CLIENT: '${prefix}w_',
  ${upperName}_SNAPSHOT_CLIENT: '${prefix}t_',
} as const`;
}

function generateTypes(config: EntityConfig): string {
  const pascalName = config.name;
  const upperName = config.name.toUpperCase();
  
  return `export type ${pascalName}EntityId = PrefixedId<typeof _PREFIXES.${upperName}_ENTITY>;
export type ${pascalName}VersionId = PrefixedId<typeof _PREFIXES.${upperName}_VERSION>;
export type ${pascalName}SnapshotId = PrefixedId<typeof _PREFIXES.${upperName}_SNAPSHOT>;
export type ${pascalName}EntityClientId = PrefixedId<typeof _PREFIXES.${upperName}_ENTITY_CLIENT>;
export type ${pascalName}VersionClientId = PrefixedId<typeof _PREFIXES.${upperName}_VERSION_CLIENT>;
export type ${pascalName}SnapshotClientId = PrefixedId<typeof _PREFIXES.${upperName}_SNAPSHOT_CLIENT>;`;
}

function generateOrderTypes(config: EntityConfig): string {
  const pascalName = config.name;
  const lowerName = config.name.toLowerCase();
  
  return `export type ${pascalName}EntityOrder = (number | string) & { __${lowerName}_entity_order: true };
export type ${pascalName}VersionOrder = (number | string) & { __${lowerName}_version_order: true };
export type ${pascalName}SnapshotOrder = (number | string) & { __${lowerName}_snapshot_order: true };
export type ${pascalName}EntityClientOrder = (number | string) & { __${lowerName}_entity_client_order: true };
export type ${pascalName}VersionClientOrder = (number | string) & { __${lowerName}_version_client_order: true };
export type ${pascalName}SnapshotClientOrder = (number | string) & { __${lowerName}_snapshot_client_order: true };`;
}

function generateTypeBlob(config: EntityConfig): string {
  const pascalName = config.name;
  const lowerName = config.name.toLowerCase();
  
  return `
export type ${pascalName}TypeBlob = {
  'clientEntityId': ${pascalName}EntityClientId;
  'clientVersionId': ${pascalName}VersionClientId;
  'clientSnapshotId': ${pascalName}SnapshotClientId;
  'serverEntityId': ${pascalName}EntityId;
  'serverVersionId': ${pascalName}VersionId;
  'serverSnapshotId': ${pascalName}SnapshotId;

  'clientEntityOrder': ${pascalName}EntityClientOrder;
  'clientVersionOrder': ${pascalName}VersionClientOrder;
  'clientSnapshotOrder': ${pascalName}SnapshotClientOrder;
  'serverEntityOrder': ${pascalName}EntityOrder;
  'serverVersionOrder': ${pascalName}VersionOrder;
  'serverSnapshotOrder': ${pascalName}SnapshotOrder;
}

type _check = AssertExtends<${pascalName}TypeBlob, TypeBlob>;
`;
}

function generateIdFileForEntity(config: EntityConfig, context: string = '', includeTypeBlob: boolean = false): string {
  const header = `${generateImports()}


/**
 * Generated from: ${context}
 * Entity: ${config.name} with prefix '${config.prefix}'
 */

`;

  const prefixes = generatePrefixConstants(config);
  const types = generateTypes(config);
  const orderTypes = generateOrderTypes(config);
  
  let content = header + prefixes + '\n\n' + types + '\n\n' + orderTypes + '\n';
  
  if (includeTypeBlob) {
    const typeBlob = generateTypeBlob(config);
    content += '\n' + typeBlob;
  }
  
  return content;
}

// NOTE(bowei): this is the good one
function generateIdFile(input: string): string {
  const config = parseEntityConfig(input);
  const context = `Generated by: ${process.argv[1]}, Generated from "${config.name}: '${config.prefix}'"`;
  return generateIdFileForEntity(config, context, true);
}

function parseEntityConfig(input: string): EntityConfig {
  // Parse "EntityName: 'prefix'" format
  const match = input.match(/^(\w+):\s*['"](\w+)['"]$/);
  if (!match) {
    throw new Error(`Invalid input format. Expected "EntityName: 'prefix'", got: ${input}`);
  }
  
  return {
    name: match[1],
    prefix: match[2]
  };
}

export { 
  EntityConfig, 
  generateIdFile, 
  generateIdFileForEntity, 
  parseEntityConfig 
};