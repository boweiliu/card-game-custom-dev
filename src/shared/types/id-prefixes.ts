// Centralized ID prefix system for easy identification of entity types

// ID prefix constants
export const ID_PREFIXES = {
  // Database entity prefixes
  PROTOCARD: 'pc_', // deprecated
  PROTOCARD_TRANSPORT: 'pc_', // deprecated
  GAME_CARD: 'gc_',
  GAME_HISTORY: 'gh_',
  GAME_SNAPSHOT: 'gs_',
  GAME_ACTION: 'ga_',


  // Message correlation ID prefixes
  MESSAGE: 'msg_', // deprecated
  PENDING_MESSAGE: 'pmsg_', // deprecated

  // Temporary/pending entity prefixes
  TEMPORARY_ENTITY: 'tmp_', // deprecated

  // New style
  // DB
  PROTOCARD_ENTITY: 'pce_',
  PROTOCARD_VERSION: 'pcv_',
  PROTOCARD_SNAPSHOT: 'pcs_',
  // Client
  PROTOCARD_ENTITY_CLIENT: 'pcf_',
  PROTOCARD_VERSION_CLIENT: 'pcw_',
  PROTOCARD_SNAPSHOT_CLIENT: 'pct_',

  // generic messages
  // from server to client
  SYNC_SERVER_MESSAGE: "mgs_", 
  ACK_SERVER_MESSAGE: "mga_",
  // from client to server
  SYNC_CLIENT_MESSAGE: "mgt_", 
  ACK_CLIENT_MESSAGE: "mgb_",
} as const;

export type ProtocardEntityId = PrefixedId<typeof ID_PREFIXES.PROTOCARD_ENTITY>;
export type ProtocardVersionId = PrefixedId<typeof ID_PREFIXES.PROTOCARD_VERSION>;
export type ProtocardSnapshotId = PrefixedId<typeof ID_PREFIXES.PROTOCARD_SNAPSHOT>;
export type ProtocardEntityClientId = PrefixedId<typeof ID_PREFIXES.PROTOCARD_ENTITY_CLIENT>;
export type ProtocardVersionClientId = PrefixedId<typeof ID_PREFIXES.PROTOCARD_VERSION_CLIENT>;
export type ProtocardSnapshotClientId = PrefixedId<typeof ID_PREFIXES.PROTOCARD_SNAPSHOT_CLIENT>;

export type SyncServerMessageId = PrefixedId<typeof ID_PREFIXES.SYNC_SERVER_MESSAGE>;
export type AckServerMessageId = PrefixedId<typeof ID_PREFIXES.ACK_SERVER_MESSAGE>;
export type SyncClientMessageId = PrefixedId<typeof ID_PREFIXES.SYNC_CLIENT_MESSAGE>;
export type AckClientMessageId = PrefixedId<typeof ID_PREFIXES.ACK_CLIENT_MESSAGE>;

// Helper type to extract prefix values
export type IDPrefix = (typeof ID_PREFIXES)[keyof typeof ID_PREFIXES];

// Generic branded ID type with prefix validation
export type GenericPrefixedId = string & {
  __prefixed_id: true;
}
export type PrefixedId<T extends string> = string & {
  __prefixed_id: true;
  __prefix: T;
} satisfies GenericPrefixedId;


// New prefixed ID types (for future use)
export type PrefixedProtocardId = PrefixedId<typeof ID_PREFIXES.PROTOCARD>;
export type GameCardId = PrefixedId<typeof ID_PREFIXES.GAME_CARD>;
export type GameHistoryId = PrefixedId<typeof ID_PREFIXES.GAME_HISTORY>;
export type PrefixedGameSnapshotId = PrefixedId<
  typeof ID_PREFIXES.GAME_SNAPSHOT
>;
export type PrefixedGameActionId = PrefixedId<typeof ID_PREFIXES.GAME_ACTION>;
export type PrefixedMessageID = PrefixedId<typeof ID_PREFIXES.MESSAGE>;
export type PrefixedPendingMessageID = PrefixedId<
  typeof ID_PREFIXES.PENDING_MESSAGE
>;
export type PrefixedPendingEntityId = PrefixedId<
  typeof ID_PREFIXES.TEMPORARY_ENTITY
>;

// Legacy ID types (for backward compatibility during transition)
export type ProtocardId = number & { __protocard_id: true };
export type MessageID = (string | number) & { __message_id: true };
export type PendingMessageID = (string | number) & {
  __pending_message_id: true;
};

// EntityId -> corresponds with the database id. Guaranteed to be unique and managed by the DB. See above.
// TransportId -> is a value generated by the frontend to identify a card that may or may not be synced up yet.
// PendingEntityId -> deprecated
export type PendingEntityId = string & { __pending_entity_id: true };
export type TransportId = PrefixedId<typeof ID_PREFIXES.TEMPORARY_ENTITY> & { __transport_id: true };

// ID generation utilities
export class IDGenerator {
  private static counters: Record<string, number> = {};

  /**
   * Generate a new ID with the specified prefix using base36 (56 chars + 8 for prefix = 64 total)
   */
  static generate<T extends IDPrefix>(prefix: T): PrefixedId<T> {
    const timestamp = Date.now().toString(36);
    // Math.random().toString(36) gives "0.abc123..." so .substring(2) removes "0."
    const random1 = Math.random().toString(36).substring(2);
    const random2 = Math.random().toString(36).substring(2);
    // Combine timestamp + 2 random strings, then truncate to exactly 56 chars
    const combined = (timestamp + random1 + random2).substring(0, 56);
    return `${prefix}${combined}` as PrefixedId<T>;
  }

  /**
   * Validate that an ID has the expected prefix
   */
  static validatePrefix<T extends IDPrefix>(
    id: string,
    expectedPrefix: T
  ): id is PrefixedId<T> {
    return id.startsWith(expectedPrefix);
  }

  /**
   * Extract the prefix from an ID
   */
  static getPrefix(id: string): string | null {
    const prefixValues = Object.values(ID_PREFIXES);
    const foundPrefix = prefixValues.find((prefix) => id.startsWith(prefix));
    return foundPrefix || null;
  }

  /**
   * Convert a legacy numeric ID to a prefixed ID
   */
  static fromLegacyId<T extends IDPrefix>(
    numericId: number,
    prefix: T
  ): PrefixedId<T> {
    return `${prefix}${numericId}` as PrefixedId<T>;
  }
}
